//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TheMachineACafeClient.MachineServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserPreferences", Namespace="http://schemas.datacontract.org/2004/07/TheMachineACafeService.BusinessObjects")]
    [System.SerializableAttribute()]
    public partial class UserPreferences : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumBadgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> QuantiteSucreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeBoissonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool UseMugField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumBadge {
            get {
                return this.NumBadgeField;
            }
            set {
                if ((object.ReferenceEquals(this.NumBadgeField, value) != true)) {
                    this.NumBadgeField = value;
                    this.RaisePropertyChanged("NumBadge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> QuantiteSucre {
            get {
                return this.QuantiteSucreField;
            }
            set {
                if ((this.QuantiteSucreField.Equals(value) != true)) {
                    this.QuantiteSucreField = value;
                    this.RaisePropertyChanged("QuantiteSucre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeBoisson {
            get {
                return this.TypeBoissonField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeBoissonField, value) != true)) {
                    this.TypeBoissonField = value;
                    this.RaisePropertyChanged("TypeBoisson");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool UseMug {
            get {
                return this.UseMugField;
            }
            set {
                if ((this.UseMugField.Equals(value) != true)) {
                    this.UseMugField = value;
                    this.RaisePropertyChanged("UseMug");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MachineServiceRef.IMachineService")]
    public interface IMachineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/ValidateNumBadge", ReplyAction="http://tempuri.org/IMachineService/ValidateNumBadgeResponse")]
        bool ValidateNumBadge(string numBadge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/ValidateNumBadge", ReplyAction="http://tempuri.org/IMachineService/ValidateNumBadgeResponse")]
        System.Threading.Tasks.Task<bool> ValidateNumBadgeAsync(string numBadge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/GetUserPreferences", ReplyAction="http://tempuri.org/IMachineService/GetUserPreferencesResponse")]
        TheMachineACafeClient.MachineServiceRef.UserPreferences GetUserPreferences(string numBadge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/GetUserPreferences", ReplyAction="http://tempuri.org/IMachineService/GetUserPreferencesResponse")]
        System.Threading.Tasks.Task<TheMachineACafeClient.MachineServiceRef.UserPreferences> GetUserPreferencesAsync(string numBadge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/SetUserPreferences", ReplyAction="http://tempuri.org/IMachineService/SetUserPreferencesResponse")]
        void SetUserPreferences(TheMachineACafeClient.MachineServiceRef.UserPreferences userPreferences);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/SetUserPreferences", ReplyAction="http://tempuri.org/IMachineService/SetUserPreferencesResponse")]
        System.Threading.Tasks.Task SetUserPreferencesAsync(TheMachineACafeClient.MachineServiceRef.UserPreferences userPreferences);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/GetListBoisson", ReplyAction="http://tempuri.org/IMachineService/GetListBoissonResponse")]
        string[] GetListBoisson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineService/GetListBoisson", ReplyAction="http://tempuri.org/IMachineService/GetListBoissonResponse")]
        System.Threading.Tasks.Task<string[]> GetListBoissonAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMachineServiceChannel : TheMachineACafeClient.MachineServiceRef.IMachineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MachineServiceClient : System.ServiceModel.ClientBase<TheMachineACafeClient.MachineServiceRef.IMachineService>, TheMachineACafeClient.MachineServiceRef.IMachineService {
        
        public MachineServiceClient() {
        }
        
        public MachineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MachineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ValidateNumBadge(string numBadge) {
            return base.Channel.ValidateNumBadge(numBadge);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateNumBadgeAsync(string numBadge) {
            return base.Channel.ValidateNumBadgeAsync(numBadge);
        }
        
        public TheMachineACafeClient.MachineServiceRef.UserPreferences GetUserPreferences(string numBadge) {
            return base.Channel.GetUserPreferences(numBadge);
        }
        
        public System.Threading.Tasks.Task<TheMachineACafeClient.MachineServiceRef.UserPreferences> GetUserPreferencesAsync(string numBadge) {
            return base.Channel.GetUserPreferencesAsync(numBadge);
        }
        
        public void SetUserPreferences(TheMachineACafeClient.MachineServiceRef.UserPreferences userPreferences) {
            base.Channel.SetUserPreferences(userPreferences);
        }
        
        public System.Threading.Tasks.Task SetUserPreferencesAsync(TheMachineACafeClient.MachineServiceRef.UserPreferences userPreferences) {
            return base.Channel.SetUserPreferencesAsync(userPreferences);
        }
        
        public string[] GetListBoisson() {
            return base.Channel.GetListBoisson();
        }
        
        public System.Threading.Tasks.Task<string[]> GetListBoissonAsync() {
            return base.Channel.GetListBoissonAsync();
        }
    }
}
